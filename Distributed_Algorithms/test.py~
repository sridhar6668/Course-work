import threading;
import sys;

n = int(sys.argv[1]);
rep = int(sys.argv[2])/n;
#print "n: " + str(n);
#print "rep: " + str(rep);

choosing = [0 for i in range(0,n)];
num = [0 for i in range(0,n)];

class myThread (threading.Thread):
	def __init__(self, id, name):
		threading.Thread.__init__(self);
		self.threadID = id;
		self.name =  name;
	def run(self):
		#print "Starting " + self.name + " id: " + str(self.threadID);
		access_cs(self.name, self.threadID);
		
def find_max(num):
	max = num[0];
	for i in range(0,n):
		if(num[i] > max):
			max = num[i]
	return max;
def access_cs(name, id):
	global n;
	global choosing;
	global num;
	global rep;
	flag = 0;
	i = 0;
	while(i < rep):
		choosing[id] = 1;
		num[id] = 1 + find_max(num);
		choosing[id] = 0;
		for j in range(0,n):
			if(j != id):			
				# check whether all choosing are zero else spin	
				while(choosing[j]!=0):
					print "choosing spin lock " + name;
				# check whether all num are either 0 or greater than the num[id] else spin
				while(((num[j] == 0) or (num[j] > num[id]) or (num[j] == num[id] and j > id)) == False):
					# print msg starts
					if(flag == 0):
						flag = 1;	
						print_value = "num spin lock " + name + " j:" + str(j) + " id: " + str(id) + " num[j]: " + str(num[j]) + " num[id]: " + str(num[id]) + "\n";
						for k in range(0, n):
							print_value += str(num[k]) + "\t";
						print_value += "\n";
						print print_value;	 
					#print ends					
		print "Critical section - " + name + "\n" + "iteration: " + str(i);
		flag = 0;
		num[id] = 0;
		i+=1;
for i in range(0,n):
	name = "Thread_" + str(i);
	thread_0 = myThread(i, name);
	thread_0.start();

